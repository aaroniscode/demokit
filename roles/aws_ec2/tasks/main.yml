---
- name: create aws filter
  set_fact:
    aws_ec2_tags_formatted: >
      {{ aws_ec2_tags_formatted | default({}) | combine(
          { 'tag:' + item.key: item.value }
        )
      }}
  loop_control:
    label: "{{ item.key + ':' + item.value }}"
  with_dict: "{{ aws_ec2_tags }}"

- name: create limit filter
  set_fact:
    aws_ec2_limit_tags_formatted: >
      {{ aws_ec2_limit_tags_formatted | default({}) | combine(
          { 'tag:' + item: '' }
        )
      }}
  loop: "{{ aws_ec2_limit_tags }}"

- name: find existing ec2 instances
  ec2_instance_facts:
    filters: >-
      {% if aws_ec2_limit_tags | count -%}
        {{
          aws_ec2_tags_formatted | combine( aws_ec2_limit_tags_formatted  )
        }}
      {% else -%}
        {{ aws_ec2_tags_formatted }}
      {% endif -%}
    profile: "{{ aws_ec2_profile }}"
    region: "{{ aws_ec2_region }}"
  register: find_ec2

- name: fail if instances are changing state
  fail:
    msg: "Please wait for your instances to finish launching, rebooting, shutting-down or stopping"
  when: >
    find_ec2.instances | count
    and
    (
      find_ec2.instances | selectattr('state.name', 'equalto', 'pending') | list +
      find_ec2.instances | selectattr('state.name', 'equalto', 'rebooting') | list +
      find_ec2.instances | selectattr('state.name', 'equalto', 'stopping') | list
    ) | count
    or
    (
      aws_ec2_state == 'terminated'
      and
      find_ec2.instances | selectattr('state.name', 'equalto', 'shutting-down') | list | count
    )

- include_tasks: "{{ aws_ec2_state }}.yml"
