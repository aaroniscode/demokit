---
- name: find subnet using tags
  ec2_vpc_subnet_facts:
    filters: "{{ aws_ec2_tags_formatted }}"
    profile: "{{ aws_ec2_profile }}"
    region: "{{ aws_ec2_region }}"
  register: find_subnet_result

- name: fail if subnet not found
  fail:
    msg: "Run 'aws/configure' to before running ec2 instances"
  when: find_subnet_result.subnets | count != 1

- name: using {{ find_subnet_result.subnets[0].id }}
  set_fact:
    aws_subnet_id: "{{ find_subnet_result.subnets[0].id }}"

- name: prepare ec2 instance list for launch
  set_fact:
    aws_ec2_formatted: >
      {{ aws_ec2_formatted | default([]) +
        [
          item.value | combine({
            'name': item.key,
            'suffix_list': lookup('sequence', item.value.count | string).split(','),
            'tag_dictionary': dict.fromkeys(
              item.value.tags | default([]) + [aws_ec2_os_tag[item.value.os]],
              ''
            ) | combine(aws_ec2_tags),
            'volumes': item.value.volumes | default(aws_ec2_volumes[item.value.os])
          })
        ]
      }}
  loop_control:
    label: "{{ item.key + ', ' + item.value.instance + ', ' + item.value.os }}"
  with_dict: "{{ aws_ec2 }}"
  when:
    - item.value.tags is not defined or
      aws_ec2_limit_tags | intersect(item.value.tags + [aws_ec2_os_tag[item.value.os]]) | count ==
      aws_ec2_limit_tags | count

- name: fail if ec2 instance list is empty
  fail:
    msg: "no ec2 instances have the combined tags: [{{ aws_ec2_limit_tags | join(', ') }}]"
  when: aws_ec2_formatted is not defined

- import_role:
    name: aws_ami
  vars:
    aws_ami_os_list: "{{ aws_ec2_formatted | map(attribute='os') | list | unique }}"

- name: start/create ec2 instances
  ec2_instance:
    image_id: "{{ aws_ami_images[item.0.os].image_id }}"
    instance_type: "{{ item.0.instance }}"
    key_name: "{{ aws_ec2_key_name }}"
    name: "{{ item.0.name + item.1 + '.' + aws_ec2_domain }}"
    profile: "{{ aws_ec2_profile }}"
    region: "{{ aws_ec2_region }}"
    security_groups: "{{ item.0.security_groups }}"
    state: running
    tags: "{{ item.0.tag_dictionary }}"
    user_data: "{{ aws_ec2_os_user_data[item.0.os] | default(omit, true) }}"
    volumes: "{{ item.0.volumes }}"
    vpc_subnet_id: "{{ aws_subnet_id }}"
    wait: "{{ aws_ec2_wait }}"
  async: 300
  changed_when: false
  loop_control:
    label: "{{ item.0.name + item.1 }}"
  poll: 0
  register: ec2_async_create
  with_subelements:
    - "{{ aws_ec2_formatted }}"
    - suffix_list

- name: wait for starting/creating
  async_status:
    jid: "{{ item.ansible_job_id }}"
  loop: "{{ ec2_async_create.results }}"
  loop_control:
    label: "{{ item.item[0].name }}{{ item.item[1] + '.' + aws_ec2_domain }}"
  register: ec2
  retries: 300
  until: ec2.finished
