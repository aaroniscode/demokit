---
- name: create {{ aws_certs_path }} directory
  file:
    path: "{{ aws_certs_path }}"
    state: directory

- name: generate letsencrypt account key
  openssl_privatekey:
    path: "{{ aws_certs_path }}/letsencrypt_account.pem"
    size: 4096

- name: create certificate directories
  file:
    path: "{{ aws_certs_path }}/{{ item.key }}.{{ aws_route53_domain }}"
    state: directory
  loop: "{{ aws_route53_letsencrypt | dict2items }}"
  loop_control:
    label: "{{ item.key + '.' + aws_route53_domain }}"

- name: generate certificate private keys
  openssl_privatekey:
    path: "{{ aws_certs_path }}/{{ item.key }}.{{ aws_route53_domain }}/key.pem"
    size: 4096
  loop: "{{ aws_route53_letsencrypt | dict2items }}"
  loop_control:
    label: "{{ item.key + '.' + aws_route53_domain }}"

- name: generate certificate signing requests
  openssl_csr:
    path: "{{ aws_certs_path }}/{{ item.key }}.{{ aws_route53_domain }}.csr"
    privatekey_path: "{{ aws_certs_path }}/{{ item.key }}.{{ aws_route53_domain }}/key.pem"
    subject_alt_name: "{{ item.value.sans | map('regex_replace', '^(.+)$', 'DNS:\\1.' + aws_route53_domain) | list }}"
  loop: "{{ aws_route53_letsencrypt | dict2items }}"
  loop_control:
    label: "{{ item.key + '.' + aws_route53_domain }}"

- name: initiate letsencrypt challenge
  acme_certificate:
    account_key: "{{ aws_certs_path }}/letsencrypt_account.pem"
    acme_directory: https://acme-v01.api.letsencrypt.org/directory
    challenge: dns-01
    csr: "{{ aws_certs_path }}/{{ item.key }}.{{ aws_route53_domain }}.csr"
    fullchain: "{{ aws_certs_path }}/{{ item.key }}.{{ aws_route53_domain }}/cert.pem"
    remaining_days: "{{ item.value.remaining_days | default(omit) }}"
  loop: "{{ aws_route53_letsencrypt | dict2items }}"
  loop_control:
    label: "{{ item.key + '.' + aws_route53_domain }}"
  register: le_challenge

- name: create TXT records to satisfy challenge
  route53:
    overwrite: yes
    profile: "{{ aws_route53_profile }}"
    record: >-
      {{
        item.0.challenge_data[item.1]['dns-01'].record
      }}
    state: present
    type: TXT
    ttl: "{{ aws_route53_ttl }}"
    value: >-
      {{
        '"' + item.0.challenge_data[item.1]['dns-01'].resource_value + '"'
      }}
    wait: true
    zone: "{{ aws_route53_domain }}"
  async: 300
  loop: "{{ le_challenge.results | le_subelements('challenge_data', skip_missing=True) }}"
  loop_control:
    label: "{{ item.1 }}"
  poll: 0
  register: route53_async
  when: item.0 is changed

- name: wait for route53 records to replicate
  async_status:
    jid: "{{ item.ansible_job_id }}"
  loop: "{{ route53_async.results }}"
  loop_control:
    label: "{{ item.item.1 }}"
  register: route53
  retries: 300
  until: route53.finished
  when: item is changed

- name: validate the challenge and retrieve the certficates
  acme_certificate:
    account_key: "{{ aws_certs_path }}/letsencrypt_account.pem"
    acme_directory: https://acme-v01.api.letsencrypt.org/directory
    challenge: dns-01
    csr: "{{ aws_certs_path }}/{{ item.item.key }}.{{ aws_route53_domain }}.csr"
    data: "{{ item }}"
    fullchain: "{{ aws_certs_path }}/{{ item.item.key }}.{{ aws_route53_domain }}/cert.pem"
    remaining_days: "{{ item.item.value.remaining_days | default(omit) }}"
  loop: "{{ le_challenge.results }}"
  loop_control:
    label: "{{ item.item.key + '.' + aws_route53_domain }}"
  when: item is changed

- name: install the DST Root CA X3
  copy:
    src: files/dst-root-x3.pem
    dest: "{{ aws_certs_path }}/{{ item.key }}.{{ aws_route53_domain }}/ca.pem"
  loop: "{{ aws_route53_letsencrypt | dict2items }}"
  loop_control:
    label: "{{ item.key + '.' + aws_route53_domain }}"